@page "/student"
@using BlazorApp.Components.Models
@using BlazorApp.Components.Repository

<PageTitle>Student search</PageTitle>

<h1>Student search</h1>

<div class="form-group">
    <label for="studentCode">Student Code:</label>
    <input id="studentCode" class="form-control" @bind="studentCode" placeholder="Enter Student Code" />
</div>

<div class="form-group">
    <label for="yearSelect">Select Year:</label>
    <select id="yearSelect" class="form-control" @bind="selectedYear">
        @foreach (var year in years)
        {
            <option value="@year">@year</option>
        }
    </select>
</div>

<button class="btn btn-primary mt-3" @onclick="SearchStudent">Search</button>

@if (searchPerformed)
{
    @if (studentResult != null)
    {
        <h3 class="mt-4">Student Found:</h3>
        <table class="table">
            <thead>
                <tr>
                    <th>Cod Judet</th>
                    <th>Scoala</th>
                    <th>Cod Student</th>
                    <th>Medie</th>
                    <th>Romana</th>
                    <th>Materie Obligatorie</th>
                    <th>Materie Aleasa</th>
                    <th>TIC</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>@studentResult.County</td>
                    <td>@studentResult.School</td>
                    <td>@studentResult.Code</td>
                    <td>@studentResult.Avg.ToString("0.00")</td>
                    <td>@studentResult.RomanianGradeFinal.ToString("0.00")</td>
                    <td>@studentResult.MandatoryGradeFinal.ToString("0.00")</td>
                    <td>@studentResult.ChosenGradeFinal.ToString("0.00")</td>
                    <td>@studentResult.Tic?.ToString()</td>
                </tr>
            </tbody>
        </table>

        <button class="btn btn-success mt-3" @onclick="GetStatistics">Get Student Statistics</button>

        @if (showStatistics)
        {
            <h4 class="mt-4">Statistics:</h4>

            <div class="mt-4">
                <h5>Average (Medie)</h5>
                @RenderGraph(allAvgGrades, studentResult.Avg)
            </div>

            <div class="mt-4">
                <h5>Materie Obligatorie</h5>
                @RenderGraph(allMandatoryGrades, studentResult.MandatoryGradeFinal)
            </div>

            <div class="mt-4">
                <h5>Materie Aleasa</h5>
                @RenderGraph(allChosenGrades, studentResult.ChosenGradeFinal)
            </div>
        }
    }
    else
    {
        <p class="text-danger mt-4">No student with this ID and year found.</p>
    }
}

@code {
    private string studentCode;
    private int selectedYear = 2023; // Default year
    private List<int> years = Enumerable.Range(2014, 10).ToList(); // 2014-2023
    private Bac studentResult;
    private bool searchPerformed = false;
    private bool showStatistics = false;

    private List<double> allAvgGrades = new();
    private List<double> allMandatoryGrades = new();
    private List<double> allChosenGrades = new();

    private void SearchStudent()
    {
        if (string.IsNullOrWhiteSpace(studentCode))
        {
            studentResult = null;
            searchPerformed = true;
            return;
        }

        string filePath = $"Data/Bac/{selectedYear}_final.csv"; // Adjust path to where CSVs are

        if (File.Exists(filePath))
        {
            var repository = new BacRepository(filePath);
            studentResult = repository.GetAllBac()
                .FirstOrDefault(b => b.Code.Equals(studentCode.Trim(), StringComparison.OrdinalIgnoreCase));
        }
        else
        {
            studentResult = null;
        }

        searchPerformed = true;
    }

    private void GetStatistics()
    {
        if (studentResult == null)
            return;

        string filePath = $"Data/Bac/{selectedYear}_final.csv";

        if (File.Exists(filePath))
        {
            var repository = new BacRepository(filePath);
            var allStudents = repository.GetAllBac();

            allAvgGrades = allStudents.Select(b => b.Avg).ToList();
            allMandatoryGrades = allStudents.Select(b => b.MandatoryGradeFinal).ToList();
            allChosenGrades = allStudents.Select(b => b.ChosenGradeFinal).ToList();
        }

        showStatistics = true;
    }

    private RenderFragment RenderGraph(List<double> grades, double studentGrade) => builder =>
    {
        if (grades == null || grades.Count == 0)
            return;

        // Calculate position
        int studentIndex = grades.Where(g => g <= studentGrade).Count();
        double percentage = (double)studentIndex / grades.Count * 100;

        // Build simple bar graph (simplified)
        builder.OpenElement(0, "div");
        builder.AddAttribute(1, "style", "width: 100%; height: 200px; position: relative; background: linear-gradient(to right, lightblue 0%, lightblue " + percentage.ToString("0.0") + "%, lightgray " + percentage.ToString("0.0") + "%, lightgray 100%); margin-bottom: 20px;");

        // Red dot for student
        builder.OpenElement(2, "div");
        builder.AddAttribute(3, "style", $"position: absolute; left: {percentage}%; top: 50%; transform: translate(-50%, -50%); width: 15px; height: 15px; background: red; border-radius: 50%;");
        builder.CloseElement();

        builder.CloseElement();

        // Text
        builder.OpenElement(4, "p");
        builder.AddAttribute(5, "style", "margin-top: 10px;");
        builder.AddContent(6, $"You are in the top {percentage.ToString("0.0")}% of your year.");
        builder.CloseElement();
    };
}
