@page "/"
@using BlazorApp.Components.Models
@using BlazorApp.Components.Repository
@using Microsoft.AspNetCore.Components.Web.Virtualization


<PageTitle>Home</PageTitle>

<h1>Rezultate BAC</h1>

<label for="yearSelect">Select Year:</label>
<select id="yearSelect" @bind="selectedYear">
    @foreach (var year in years)
    {
        <option value="@year">@year</option>
    }
</select>

@if (bacList == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th @onclick="() => SortByColumn(nameof(Bac.County))">
                    Cod Judet @(SortColumn == nameof(Bac.County) ? (SortAscending ? "▲" : "▼") : "")
                </th>
                <th @onclick="() => SortByColumn(nameof(Bac.School))">
                    Scoala @(SortColumn == nameof(Bac.School) ? (SortAscending ? "▲" : "▼") : "")
                </th>
                <th @onclick="() => SortByColumn(nameof(Bac.Code))">
                    Cod Student @(SortColumn == nameof(Bac.Code) ? (SortAscending ? "▲" : "▼") : "")
                </th>
                <th @onclick="() => SortByColumn(nameof(Bac.Avg))">
                    Medie @(SortColumn == nameof(Bac.Avg) ? (SortAscending ? "▲" : "▼") : "")
                </th>
                <th @onclick="() => SortByColumn(nameof(Bac.RomanianGradeFinal))">
                    Romana @(SortColumn == nameof(Bac.RomanianGradeFinal) ? (SortAscending ? "▲" : "▼") : "")
                </th>
                <th @onclick="() => SortByColumn(nameof(Bac.MandatoryGradeFinal))">
                    Materie Obligatorie @(SortColumn == nameof(Bac.MandatoryGradeFinal) ? (SortAscending ? "▲" : "▼") : "")
                </th>
                <th @onclick="() => SortByColumn(nameof(Bac.ChosenGradeFinal))">
                    Materie Aleasa @(SortColumn == nameof(Bac.ChosenGradeFinal) ? (SortAscending ? "▲" : "▼") : "")
                </th>
                <th @onclick="() => SortByColumn(nameof(Bac.Tic))">
                    TIC @(SortColumn == nameof(Bac.Tic) ? (SortAscending ? "▲" : "▼") : "")
                </th>
            </tr>
        </thead>
        <tbody>
            <Virtualize Items="bacList" Context="bac">
                <tr>
                    <td>@bac.County</td>
                    <td>@bac.School</td>
                    <td>@bac.Code</td>
                    <td>@bac.Avg.ToString("0.00")</td>
                    <td>@bac.RomanianGradeFinal.ToString("0.00")</td>
                    <td>@bac.MandatoryGradeFinal.ToString("0.00")</td>
                    <td>@bac.ChosenGradeFinal.ToString("0.00")</td>
                    <td>@bac.Tic?.ToString()</td>
                </tr>
            </Virtualize>
        </tbody>
    </table>
}


@code {
    private List<Bac> bacList;

    private int _selectedYear = 2023; // Default year
    private int selectedYear
    {
        get => _selectedYear;
        set
        {
            if (_selectedYear != value)
            {
                _selectedYear = value;
                LoadBacData(_selectedYear);
            }
        }
    }

    private string SortColumn = nameof(Bac.Avg); // Default sort
    private bool SortAscending = false;



    private List<int> years = Enumerable.Range(2014, 10).ToList(); // 2014-2023



    protected override void OnInitialized()
    {
        LoadBacData(selectedYear);
    }

    // private void OnYearChanged(ChangeEventArgs e)
    // {
    //     selectedYear = int.Parse(e.Value.ToString());
    //     LoadBacData(selectedYear);
    // }

    private void LoadBacData(int year)
    {
        string filePath = $"Data/Bac/{year}_final.csv"; // for example: Data/Bac2023.csv

        if (File.Exists(filePath))
        {
            var repository = new BacRepository(filePath);
            bacList = repository.GetAllBac().ToList(); // ← no need to sort manually here
            SortColumn = nameof(Bac.Avg); // ← set default sort column
            SortAscending = false; // ← descending
            SortBacList();
        }
        else
        {
            bacList = new List<Bac>(); // No data
        }
    }

    private void SortByColumn(string columnName)
    {
        if (SortColumn == columnName)
        {
            // If clicking the same column, reverse sort order
            SortAscending = !SortAscending;
        }
        else
        {
            // New column clicked
            SortColumn = columnName;
            SortAscending = true;
        }

        SortBacList();
    }

    private void SortBacList()
    {
        if (bacList == null) return;

        bacList = SortColumn switch
        {
            nameof(Bac.County) => (SortAscending ? bacList.OrderBy(b => b.County) : bacList.OrderByDescending(b => b.County)).ToList(),
            nameof(Bac.School) => (SortAscending ? bacList.OrderBy(b => b.School) : bacList.OrderByDescending(b => b.School)).ToList(),
            nameof(Bac.Code) => (SortAscending ? bacList.OrderBy(b => b.Code) : bacList.OrderByDescending(b => b.Code)).ToList(),
            nameof(Bac.Avg) => (SortAscending ? bacList.OrderBy(b => b.Avg) : bacList.OrderByDescending(b => b.Avg)).ToList(),
            nameof(Bac.RomanianGradeFinal) => (SortAscending ? bacList.OrderBy(b => b.RomanianGradeFinal) : bacList.OrderByDescending(b => b.RomanianGradeFinal)).ToList(),
            nameof(Bac.MandatoryGradeFinal) => (SortAscending ? bacList.OrderBy(b => b.MandatoryGradeFinal) : bacList.OrderByDescending(b => b.MandatoryGradeFinal)).ToList(),
            nameof(Bac.ChosenGradeFinal) => (SortAscending ? bacList.OrderBy(b => b.ChosenGradeFinal) : bacList.OrderByDescending(b => b.ChosenGradeFinal)).ToList(),
            nameof(Bac.Tic) => (SortAscending ? bacList.OrderBy(b => b.Tic) : bacList.OrderByDescending(b => b.Tic)).ToList(),
            _ => bacList
        };
    }


}
