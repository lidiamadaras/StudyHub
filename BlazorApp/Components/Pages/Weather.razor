@page "/statistics"
@using BlazorApp.Components.Models
@using BlazorApp.Components.Repository
@using System.Globalization;
@using System.Text;

@inject IJSRuntime JS



<PageTitle>Statistics</PageTitle>

<h3>Average Medie by County</h3>

<label for="yearSelect">Select Year:</label>
<select id="yearSelect" @bind="selectedYear">
    @foreach (var year in years)
    {
        <option value="@year">@year</option>
    }
</select>

<RomaniaMap CountyMedi="CountyMedi"
            GetColor="GetColor"
            CountyCodeMap="CountyCodeMap" />

<div style="text-align: center;">
    <h4>Hungarian (@hungarianCount)</h4>
    <div style="width: 100px; height: @hungarianAverage * 10px; background-color: #4e79a7;"></div>
    <p>@hungarianAverage?.ToString("0.00")</p>
</div>

<div style="text-align: center;">
    <h4>Romanian (@romanianCount)</h4>
    <div style="width: 100px; height: @romanianAverage * 10px; background-color: #f28e2c;"></div>
    <p>@romanianAverage?.ToString("0.00")</p>
</div>



@code {

    private List<Bac> bacList;
	private List<CountyAverage> CountyMedi => GetCountyAverages(bacList, selectedYear);

    private int hungarianCount => bacList?
    .Count(b => b.Year == selectedYear && b.Nationality?.Trim().ToLower() == "maghiara" && b.Avg > 0) ?? 0;

    private int romanianCount => bacList?
        .Count(b => b.Year == selectedYear && b.Nationality?.Trim().ToLower() == "romana" && b.Avg > 0) ?? 0;


    private double? hungarianAverage => bacList?
    .Where(b => b.Year == selectedYear && b.Nationality?.Trim().ToLower() == "maghiara" && b.Avg > 0)
    .Select(b => b.Avg)
    .DefaultIfEmpty(0)
    .Average();

    private double? romanianAverage => bacList?
        .Where(b => b.Year == selectedYear && b.Nationality?.Trim().ToLower() == "romana" && b.Avg > 0)
        .Select(b => b.Avg)
        .DefaultIfEmpty(0)
        .Average();



    private Dictionary<string, string> CountyCodeMap = new()
    {
        { NormalizeCountyName("Alba"), "RO-AB" },
        { NormalizeCountyName("Arad"), "RO-AR" },
        { NormalizeCountyName("Arges"), "RO-AG" },
        { NormalizeCountyName("Bacau"), "RO-BC" },
        { NormalizeCountyName("Bihor"), "RO-BH" },
        { NormalizeCountyName("Bistrita-Nasaud"), "RO-BN" },
        { NormalizeCountyName("Botosani"), "RO-BT" },
        { NormalizeCountyName("Brasov"), "RO-BV" },
        { NormalizeCountyName("Braila"), "RO-BR" },
        { NormalizeCountyName("Bucuresti"), "RO-B" },
        { NormalizeCountyName("Buzau"), "RO-BZ" },
        { NormalizeCountyName("Caras-Severin"), "RO-CS" },
        { NormalizeCountyName("Calarasi"), "RO-CL" },
        { NormalizeCountyName("Cluj"), "RO-CJ" },
        { NormalizeCountyName("Constanta"), "RO-CT" },
        { NormalizeCountyName("Covasna"), "RO-CV" },
        { NormalizeCountyName("Dambovita"), "RO-DB" },
        { NormalizeCountyName("Dolj"), "RO-DJ" },
        { NormalizeCountyName("Galati"), "RO-GL" },
        { NormalizeCountyName("Giurgiu"), "RO-GR" },
        { NormalizeCountyName("Gorj"), "RO-GJ" },
        { NormalizeCountyName("Harghita"), "RO-HR" },
        { NormalizeCountyName("Hunedoara"), "RO-HD" },
        { NormalizeCountyName("Ialomita"), "RO-IL" },
        { NormalizeCountyName("Iasi"), "RO-IS" },
        { NormalizeCountyName("Ilfov"), "RO-IF" },
        { NormalizeCountyName("Maramures"), "RO-MM" },
        { NormalizeCountyName("Mehedinti"), "RO-MH" },
        { NormalizeCountyName("Mures"), "RO-MS" },
        { NormalizeCountyName("Neamt"), "RO-NT" },
        { NormalizeCountyName("Olt"), "RO-OT" },
        { NormalizeCountyName("Prahova"), "RO-PH" },
        { NormalizeCountyName("Satu Mare"), "RO-SM" },
        { NormalizeCountyName("Salaj"), "RO-SJ" },
        { NormalizeCountyName("Sibiu"), "RO-SB" },
        { NormalizeCountyName("Suceava"), "RO-SV" },
        { NormalizeCountyName("Teleorman"), "RO-TR" },
        { NormalizeCountyName("Timis"), "RO-TM" },
        { NormalizeCountyName("Tulcea"), "RO-TL" },
        { NormalizeCountyName("Vaslui"), "RO-VS" },
        { NormalizeCountyName("Valcea"), "RO-VL" },
        { NormalizeCountyName("Vrancea"), "RO-VN" }
    };

    static string NormalizeCountyName(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
            return "";

        var normalized = input.Normalize(NormalizationForm.FormD);
        var sb = new StringBuilder();

        foreach (var c in normalized)
        {
            var uc = CharUnicodeInfo.GetUnicodeCategory(c);
            if (uc != UnicodeCategory.NonSpacingMark)
                sb.Append(c);
        }

        return sb.ToString().ToLowerInvariant(); 
    }



    private int _selectedYear = 2023; 
    private int selectedYear
    {
        get => _selectedYear;
        set
        {
            if (_selectedYear != value)
            {
                _selectedYear = value;
                LoadBacData(_selectedYear);
            }
        }
    }

    private List<int> years = Enumerable.Range(2014, 10).ToList(); // 2014-2023

    protected override void OnInitialized()
    {
        LoadBacData(selectedYear);

    }

    private void LoadBacData(int year)
    {
        string filePath = $"Data/Bac/{year}_final.csv";

        if (File.Exists(filePath))
        {
            var repository = new BacRepository(filePath);
            var allBacs = repository.GetAllBac();

            bacList = allBacs;

        }
        else
        {
            bacList = new List<Bac>();
        }
    }

    string GetColor(double value)
    {
        int grade = (int)Math.Round(value);

        return grade switch
        {
            1 => "#e0f0ff", // lightest
            2 => "#b3d9ff",
            3 => "#99ccff",
            4 => "#80bfff",
            5 => "#66b2ff",
            6 => "#3399ff",
            7 => "#1a8cff",
            8 => "#0073e6",
            9 => "#0059b3",
            10 => "#003d80", // darkest
            _ => "#ffffff" // fallback to white for invalid values
        };
    }



    // string GetColor(double avg)
    // {
    //     double max = CountyMedi.Max(c => c.Average);
    //     double min = CountyMedi.Min(c => c.Average);
    //     double normalized = (avg - min) / (max - min);
    //     int val = (int)(255 - normalized * 180);
    //     return $"rgb({val}, {val}, 255)"; 
    // }

    public List<CountyAverage> GetCountyAverages(List<Bac> data, int year)
    {
        return data
            .Where(b => b.Year == year)
            .GroupBy(b => b.CountyRo) 
            .Select(g => new CountyAverage
                {
                    County = NormalizeCountyName(g.Key),
                    Average = Math.Round(g.Average(b => b.Avg), 2)
                })
            .OrderByDescending(ca => ca.Average)
            .ToList();
    }
}